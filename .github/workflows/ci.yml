name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_integration_service
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run linting (Black)
      run: poetry run black --check src tests
    
    - name: Run linting (isort)
      run: poetry run isort --check-only src tests
    
    - name: Run linting (flake8)
      run: poetry run flake8 src tests
    
    - name: Run type checking (mypy)
      run: poetry run mypy src
    
    - name: Run security checks (bandit)
      run: poetry run bandit -r src
    
    - name: Run dependency checks (safety)
      run: poetry run safety check
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_integration_service
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        SERVICETITAN_CLIENT_ID: test_client_id
        SERVICETITAN_CLIENT_SECRET: test_client_secret
      run: poetry run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: servicetitan-integration:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max